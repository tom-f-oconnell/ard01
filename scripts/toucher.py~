#!/usr/bin/env python
#-----------------------------------------------------------------------
# Touch stimulation node
# Author: Pavan Ramdya
# Date: 150908
# Modified:
#-----------------------------------------------------------------------

#Basic imports
from ctypes import *
import rospy
import sys
import datetime
import time
import shutil

# Define time stamp for filename
def timeStamped(fname, fmt='vid_%Y-%m-%d-%H-%M-%S_{fname}'):
    return datetime.datetime.now().strftime(fmt).format(fname=fname)        

# Set filename parameters
filename = timeStamped('touches.txt')
directory = '/home/scientist/pavan/ROSvideo/data/'

# Define file moving
def move(src, dest):
    shutil.move(src,dest)

#Phidget specific imports - Stepper
from Phidgets.PhidgetException import PhidgetErrorCodes, PhidgetException
from Phidgets.Events.Events import AttachEventArgs, DetachEventArgs, ErrorEventArgs, InputChangeEventArgs, CurrentChangeEventArgs, StepperPositionChangeEventArgs, VelocityChangeEventArgs
from Phidgets.Devices.Stepper import Stepper
from Phidgets.Phidget import PhidgetLogLevel

#Create a stepper object
try:
    stepper = Stepper()
except RuntimeError as e:
    print("Runtime Exception: %s" % e.details)
    print("Exiting....")
    exit(1)

#Information Display Function
def DisplayDeviceInfo():
    print("|------------|----------------------------------|--------------|------------|")
    print("|- Attached -|-              Type              -|- Serial No. -|-  Version -|")
    print("|------------|----------------------------------|--------------|------------|")
    print("|- %8s -|- %30s -|- %10d -|- %8d -|" % (stepper.isAttached(), stepper.getDeviceName(), stepper.getSerialNum(), stepper.getDeviceVersion()))
    print("|------------|----------------------------------|--------------|------------|")
    print("Number of Motors: %i" % (stepper.getMotorCount()))

#Event Handler Callback Functions
def StepperAttached(e):
    attached = e.device
    print("Stepper %i Attached!" % (attached.getSerialNum()))

def StepperDetached(e):
    detached = e.device
    print("SteppesetTargetPositionr %i Detached!" % (detached.getSerialNum()))

def StepperError(e):
    try:
        source = e.device

        print("Stepper %i: Phidget Error %i: %s" % (source.getSerialNum(), e.eCode, e.description))
    except PhidgetException as e:
        print("Phidget Exception %i: %s" % (e.code, e.details))


def StepperCurrentChanged(e):
    source = e.device
    #print("Stepper %i: Motor %i -- Current Draw: %6f" % (source.getSerialNum(), e.index, e.current))

def StepperInputChanged(e):
    source = e.device
    #print("Stepper %i: Input %i -- State: %s" % (source.getSerialNum(), e.index, e.state))

def StepperPositionChanged(e):
    source = e.device
    #print("Stepper %i: Motor %i -- Position: %f" % (source.getSerialNum(), e.index, e.position))

def StepperVelocityChanged(e):
    source = e.device
    #print("Stepper %i: Motor %i -- Velocity: %f" % (source.getSerialNum(), e.index, e.velocity))

#Main code
try:
    stepper.setOnAttachHandler(StepperAttached)
    stepper.setOnDetachHandler(StepperDetached)
    stepper.setOnErrorhandler(StepperError)
    stepper.setOnCurrentChangeHandler(StepperCurrentChanged)
    stepper.setOnInputChangeHandler(StepperInputChanged)
    stepper.setOnPositionChangeHandler(StepperPositionChanged)
    stepper.setOnVelocityChangeHandler(StepperVelocityChanged)
except PhidgetException as e:
    print("Phidget Exception %i: %s" % (e.code, e.details))
    print("Exiting....")
    exit(1)

print("Opening phidget object....")

try:
    stepper.openPhidget()
except PhidgetException as e:
    print("Phidget Exception %i: %s" % (e.code, e.details))
    print("Exiting....")
    exit(1)

print("Waiting for attach....")

try:
    stepper.waitForAttach(10000)
except PhidgetException as e:
    print("Phidget Exception %i: %s" % (e.code, e.details))
    try:
        stepper.closePhidget()
    except PhidgetException as e:
        print("Phidget Exception %i: %s" % (e.code, e.details))
        print("Exiting....")
        exit(1)
    print("Exiting....")
    exit(1)
else:
    DisplayDeviceInfo()

try:
    print("Set the motor as engaged...")
    stepper.setEngaged(0, True)
    time.sleep(1)
    
    print("The motor will run until it reaches the set goal position...")
    stepper.setCurrentPosition(0, 0)
    stepper.setAcceleration(0, 8000)

    stepper.setVelocityLimit(0, int(1*383))
    MICROSTEPSPERROTATION= 40 #measured roughly empirically (check for drift)
    
    DESIREDROTATIONTIME_SEC = 1.0
    DESIREDROTATIONSPEED_ROTPERSEC = stepper.getVelocityLimit(0)/383
    
    desiredNumMicrosteps = DESIREDROTATIONSPEED_ROTPERSEC*DESIREDROTATIONTIME_SEC*MICROSTEPSPERROTATION

    f=open(filename,'w')
    while not rospy.is_shutdown():
        choice = raw_input("> ")

        if choice == 't' :
            stepper.setTargetPosition(0, int(desiredNumMicrosteps))
            try:
                f.write('{0}\n'.format(datetime.datetime.now()))
            except IndexError:
                pass
            time.sleep(1)
            stepper.setCurrentPosition(0, 0)
        else:
            break
    
    f.close()  
    stepper.setEngaged(0, False)
    time.sleep(1)
    stepper.closePhidget()

    # Move time pulse data to data folder
    oldName = '/home/scientist/.ros/' + filename
    newName = directory + filename
    move(oldName, newName)

except PhidgetException as e:
    print("Phidget Exception %i: %s" % (e.code, e.details))
    print("Exiting....")
    exit(1)

# Move time pulse data to data folder
#oldName = '/home/scientist/.ros/' + filename
#newName = directory + filename
#move(oldName, newName)
